// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type {
  GetMetricData,
  PostMetricsData,
  PostMetricsError,
  PostMetricsResponse,
  PutMetricsData,
  PutMetricsError,
  PutMetricsResponse,
  DeleteMetricsData,
  DeleteMetricsError,
  DeleteMetricsResponse,
  GetMetricsByMetricNameData,
} from '../types.gen';
import {
  client,
  getMetric,
  getMetrics,
  postMetrics,
  putMetrics,
  deleteMetrics,
  getMetricsByMetricName,
} from '../services.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  }
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getMetricQueryKey = (options: Options<GetMetricData>) => [
  createQueryKey('getMetric', options),
];

export const getMetricOptions = (options: Options<GetMetricData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getMetric({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricQueryKey(options),
  });
};

export const getMetricsQueryKey = (options?: Options) => [
  createQueryKey('getMetrics', options),
];

export const getMetricsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getMetrics({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricsQueryKey(options),
  });
};

export const postMetricsQueryKey = (options: Options<PostMetricsData>) => [
  createQueryKey('postMetrics', options),
];

export const postMetricsOptions = (options: Options<PostMetricsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await postMetrics({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMetricsQueryKey(options),
  });
};

export const postMetricsMutation = (
  options?: Partial<Options<PostMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostMetricsResponse,
    AxiosError<PostMetricsError>,
    Options<PostMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMetricsMutation = (
  options?: Partial<Options<PutMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PutMetricsResponse,
    AxiosError<PutMetricsError>,
    Options<PutMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMetricsMutation = (
  options?: Partial<Options<DeleteMetricsData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMetricsResponse,
    AxiosError<DeleteMetricsError>,
    Options<DeleteMetricsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMetrics({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMetricsByMetricNameQueryKey = (
  options: Options<GetMetricsByMetricNameData>
) => [createQueryKey('getMetricsByMetricName', options)];

export const getMetricsByMetricNameOptions = (
  options: Options<GetMetricsByMetricNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getMetricsByMetricName({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMetricsByMetricNameQueryKey(options),
  });
};
