// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-axios';
import {
  type GetMetricData,
  type GetMetricError,
  type GetMetricResponse,
  type GetMetricsError,
  type GetMetricsResponse,
  type PostMetricsData,
  type PostMetricsError,
  type PostMetricsResponse,
  type PutMetricsData,
  type PutMetricsError,
  type PutMetricsResponse,
  type DeleteMetricsData,
  type DeleteMetricsError,
  type DeleteMetricsResponse,
  type GetMetricsByMetricNameData,
  type GetMetricsByMetricNameError,
  type GetMetricsByMetricNameResponse,
  GetMetricResponseTransformer,
  GetMetricsResponseTransformer,
  PostMetricsResponseTransformer,
  GetMetricsByMetricNameResponseTransformer,
} from './types.gen';

export const client = createClient(createConfig());

export const getMetric = <ThrowOnError extends boolean = false>(
  options: Options<GetMetricData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetMetricResponse,
    GetMetricError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics/{id}',
    responseTransformer: GetMetricResponseTransformer,
  });
};

export const getMetrics = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetMetricsResponse,
    GetMetricsError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics',
    responseTransformer: GetMetricsResponseTransformer,
  });
};

export const postMetrics = <ThrowOnError extends boolean = false>(
  options: Options<PostMetricsData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostMetricsResponse,
    PostMetricsError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics',
    responseTransformer: PostMetricsResponseTransformer,
  });
};

export const putMetrics = <ThrowOnError extends boolean = false>(
  options: Options<PutMetricsData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    PutMetricsResponse,
    PutMetricsError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics',
  });
};

export const deleteMetrics = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMetricsData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteMetricsResponse,
    DeleteMetricsError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics',
  });
};

export const getMetricsByMetricName = <ThrowOnError extends boolean = false>(
  options: Options<GetMetricsByMetricNameData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetMetricsByMetricNameResponse,
    GetMetricsByMetricNameError,
    ThrowOnError
  >({
    ...options,
    url: '/metrics/{metricName}',
    responseTransformer: GetMetricsByMetricNameResponseTransformer,
  });
};
