// This file is auto-generated by @hey-api/openapi-ts

export type MetricDto = {
  id?: number;
  name?: string | null;
  description?: string | null;
  timeStamp?: Date;
  metricTypeId?: number;
  runFrequencyId?: number;
  runDay?: string | null;
  serviceAlignmentId?: number;
  dataGranularityId?: number;
  consequenceEligible?: boolean;
  metricCalculation?: string | null;
  valueType?: string | null;
  additionalInformation?: string | null;
  status?: string | null;
  createdUserId?: number;
  createdDateTime?: Date;
  updatedUserId?: number;
  updatedDateTime?: Date;
};

export type MetricForCreationDto = {
  metricPrefixId: string;
  name: string;
  description?: string | null;
  metricTypeId?: number;
  runFrequencyId?: number;
  runDay?: string | null;
  serviceAlignmentId?: number;
  dataGranularityId?: number;
  consequenceEligible?: boolean;
  metricCalculation?: string | null;
  valueType?: string | null;
  additionalInformation?: string | null;
  status: string;
  createdUserId?: number;
  createdDateTime?: Date;
  updatedUserId?: number;
  updatedDateTime?: Date;
  metricOwnerId?: number;
  metricAlignmentIdentifierId?: number;
};

export type MetricForUpdateDto = {
  metricPrefixId: string;
  name: string;
  description?: string | null;
  metricTypeId?: number;
  runFrequencyId?: number;
  runDay?: string | null;
  serviceAlignmentId?: number;
  dataGranularityId?: number;
  consequenceEligible?: boolean;
  metricCalculation?: string | null;
  valueType?: string | null;
  additionalInformation?: string | null;
  status: string;
  createdUserId?: number;
  createdDateTime?: Date;
  updatedUserId?: number;
  updatedDateTime?: Date;
  metricOwnerId?: number;
  metricAlignmentIdentifierId?: number;
};

export type GetMetricData = {
  path: {
    id: number;
  };
};

export type GetMetricResponse = MetricDto;

export type GetMetricError = unknown;

export type GetMetricsResponse = Array<MetricDto>;

export type GetMetricsError = unknown;

export type PostMetricsData = {
  body: MetricForCreationDto;
};

export type PostMetricsResponse = MetricDto;

export type PostMetricsError = unknown;

export type PutMetricsData = {
  body: MetricForUpdateDto;
  query: {
    id: number;
  };
};

export type PutMetricsResponse = void;

export type PutMetricsError = unknown;

export type DeleteMetricsData = {
  query: {
    id: number;
  };
};

export type DeleteMetricsResponse = void;

export type DeleteMetricsError = unknown;

export type GetMetricsByMetricNameData = {
  path: {
    metricName: string;
  };
};

export type GetMetricsByMetricNameResponse = MetricDto;

export type GetMetricsByMetricNameError = unknown;

export type GetMetricResponseTransformer = (
  data: any
) => Promise<GetMetricResponse>;

export type MetricDtoModelResponseTransformer = (data: any) => MetricDto;

export const MetricDtoModelResponseTransformer: MetricDtoModelResponseTransformer =
  (data) => {
    if (data?.timeStamp) {
      data.timeStamp = new Date(data.timeStamp);
    }
    if (data?.createdDateTime) {
      data.createdDateTime = new Date(data.createdDateTime);
    }
    if (data?.updatedDateTime) {
      data.updatedDateTime = new Date(data.updatedDateTime);
    }
    return data;
  };

export const GetMetricResponseTransformer: GetMetricResponseTransformer =
  async (data) => {
    MetricDtoModelResponseTransformer(data);
    return data;
  };

export type GetMetricsResponseTransformer = (
  data: any
) => Promise<GetMetricsResponse>;

export const GetMetricsResponseTransformer: GetMetricsResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(MetricDtoModelResponseTransformer);
    }
    return data;
  };

export type PostMetricsResponseTransformer = (
  data: any
) => Promise<PostMetricsResponse>;

export const PostMetricsResponseTransformer: PostMetricsResponseTransformer =
  async (data) => {
    MetricDtoModelResponseTransformer(data);
    return data;
  };

export type GetMetricsByMetricNameResponseTransformer = (
  data: any
) => Promise<GetMetricsByMetricNameResponse>;

export const GetMetricsByMetricNameResponseTransformer: GetMetricsByMetricNameResponseTransformer =
  async (data) => {
    MetricDtoModelResponseTransformer(data);
    return data;
  };
